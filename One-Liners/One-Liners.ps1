<#function Get-HostDiscovery{[CmdletBinding()]param([Parameter(Position=0,ValueFromPipeline=$true,Mandatory=$true)]$Target,[Parameter(Position=1,Mandatory=$false)][switch]$OSDet,[Parameter(Position=2,Mandatory=$false)][Int32]$Threads=5,[Parameter(Position=3,Mandatory=$false)][switch]$TraceRoute=$false,[Parameter(Position=4, Mandatory=$false)][string]$OutputAll,[Parameter(Position=5,Mandatory=$false)][string]$OutTxt,[Parameter(Position=6,Mandatory=$false)][string]$OutCsv,[Parameter(Position=7,Mandatory=$false)][string]$OutXml,[Parameter(Position=8,Mandatory=$false)][Int32]$Timeout=1000)begin{$date=Get-Date;"Starting Host Discovery at $date.";$IPs=@();$Target|%{if($_-match'^(\d{1,3}\.){3}\d{1,3}$'){$IPs+=$_}elseif($_-match'^(\d{1,3}\.){3}\d{1,3}(-\d{1,3})?$'){$s,$e=$_-split'-';$ldi=$s.LastIndexOf('.');$p=$s.Substring(0,$ldi+1);[int]$sf=$s.Substring($ldi+1);for($sf;$sf-le$e;$sf++){$IPs+=$p+[string]$sf}}elseif($_-match'^(\d{1,3}\.){3}(\d{1,3},)+\d{1,3}$'){$ldi=$_.LastIndexOf('.');$p,$e=$_.Substring(0,$ldi+1),$_.Substring($ldi+1);$sf=$e.Split(",");foreach($s in $sf){$IPs+=$p+$s}}elseif($_-match'^(\d{1,3}\.){3}\d{1,3}(/\d{1,2})?$'){$ipa,$cidr=$_-split'/';$ldi=$ipa.LastIndexOf('.');$p,$sf=$ipa.Substring(0,$ldi+1),$ipa.Substring($ldi+1);$hn=[math]::Pow(2,(32-$cidr))-1;for($i=1;$i-lt$hn;$i++){$IPs+=$p+$i}}elseif($_-match'^([0-9A-Fa-f]{0,4}:){1,7}[0-9A-Fa-f]{0,4}(/(\d{1,2}))?$'){$IPs+=$_}else{$ri=[Net.Dns]::GetHostAddresses($_)|Select-Object -ExpandProperty IPAddressToString;$IPs+=$ri}}}process{$jobs = @();$ipScanned = 0;$ipdown = 0;foreach($ip in $IPs){$ipScanned++;while($jobs.Count -ge $Threads){$completedJob = Receive-Job -Job $jobs -Wait -AutoRemoveJob;$completedJob;$jobs=$jobs | Where-Object{$_.State -ne 'Completed'}}$pingJobs = @();$pingJobs += Start-Job -ScriptBlock {param($ip, $Timeout);$result=Test-Connection -ComputerName $ip -Quiet -Count 1 -Delay ($Timeout/1000);if($result){@{'Host' = $ip;'Status' = "Up"}}else{@{'Host' = $ip;'Status' = "Down"}}} -ArgumentList $ip, $Timeout;$pingResults=Receive-Job -Job $pingJobs -Wait -AutoRemoveJob;if($pingResults.Status -eq "Up"){if($TraceRoute){$traceJob = Start-Job -ScriptBlock{param($ip, $Timeout);$TraceResult=Test-NetConnection -ComputerName $ip -TraceRoute -WarningAction SilentlyContinue;$traceRoute=$TraceResult.TraceRoute | Where-Object {$_.ToString() -ne '::'} | ForEach-Object {$_.ToString()}$traceString=$traceRoute -join ' -> ';return $traceString;} -ArgumentList $ip, $Timeout;$Trace=Receive-Job -Job $traceJob -Wait;}else{$Trace=$null}$OS=$null;if($OSDet){$OS=@();$commonPorts=@{'Linux/Unix/BSD'=@(22, 25, 80, 443, 3306, 5432, 548, 631, 8000);'Windows'=@(80, 443, 445, 3389, 1433)};$OSjobs=@(Start-Job -ScriptBlock{param($ip);try{$SMBInfo=(Get-SmbConnection -CimSession (New-CimSession -ComputerName $ip -SessionOption (New-CimSessionOption -Protocol Dcom) -ErrorAction Stop) -ErrorAction Stop).ServerName;if($SMBInfo){return "$($SMBInfo.OperatingSystem) | $($SMBInfo.Version)"}}catch{}} -ArgumentList $ip;Start-Job -ScriptBlock{param($ip);try{$HTTPHeader=(Invoke-WebRequest -Uri "http://$ip" -TimeoutSec 5 -UseBasicParsing -ErrorAction Stop).Headers["Server"];if($HTTPHeader){return [regex]::Match($HTTPHeader, '\((.*?)\)').Groups[1].Value}} catch {}} -ArgumentList $ip;Start-Job -ScriptBlock {param($ip);try {$DNSTXT=(Resolve-DnsName -Name $ip -Type TXT -ErrorAction Stop).Strings;if($DNSTXT){return "$($DNSTXT -join ' | ')"}}catch{}} -ArgumentList $ip;Start-Job -ScriptBlock{param($ip,$commonPorts,$Timeout);$remainingPorts=$commonPorts.Values|ForEach-Object{$_}|Sort-Object -Unique;$portResults=@();foreach($port in $remainingPorts){if($ip -match '^([0-9A-Fa-f]{0,4}:){1,7}[0-9A-Fa-f]{0,4}(/(\d{1,2}))?$'){$result=Test-NetConnection -ComputerName $ip -Port $port -WarningAction SilentlyContinue;if($result.TcpTestSucceeded){$portResults+=@{'Port'=$port;'Status'="Open"}}}else{$tcpClient = New-Object System.Net.Sockets.TcpClient;$addresses=[System.Net.Dns]::GetHostAddresses($ip);$success=$false;foreach($address in $addresses){try{$connect=$tcpClient.BeginConnect($address,$port,$null,$null);$waitResult=$connect.AsyncWaitHandle.WaitOne($Timeout);if($waitResult){$success=$true;break}}catch{continue}}$tcpClient.Close();if($success){@{'Port'=$num;'Status'="Open"}}}}if($portResults){$osEstimations=@{};foreach($os in $commonPorts.Keys){$osEstimations[$os]=($commonPorts[$os]|Where-Object{$portResults.Port -contains $_}).Count}$detectedOS=$osEstimations.Keys|Sort-Object{$osEstimations[$_]} -Descending|Select-Object -First 1;return $detectedOS;}} -ArgumentList $ip,$commonPorts,$Timeout;);$results=Receive-Job -Job $OSjobs -Wait -AutoRemoveJob;foreach($result in $results){if($null -ne $result){$OS+=$result}}if($OS.Count -gt 0){$OS=($OS -join ' | ')}else{$OS="Unknown"}}$jobs+=Start-Job -ScriptBlock{param($ip,$OS,$Trace,$TraceRoute,$OSDet);$output=New-Object psobject -Property @{'Target' = $ip;'Result' = $pingResults}if($TraceRoute.IsPresent){$output|Add-Member -MemberType NoteProperty -Name 'TraceRoute' -Value $Trace}if($OSDet.IsPresent){$output|Add-Member -MemberType NoteProperty -Name 'OS' -Value $OS}return $output} -ArgumentList $ip,$OS,$Trace,($TraceRoute -as [switch]),($OSDet -as [switch])}else{$ipdown++}}$Results=Receive-Job -Job $jobs -Wait -AutoRemoveJob}end{foreach($resultItem in $Results){$report="`nScan report for $($resultItem.Target):"+[Environment]::NewLine;if($resultItem.PSObject.Properties.Name -contains 'OS'){$report+="OS:$($resultItem.OS)"+[Environment]::NewLine}if($resultItem.PSObject.Properties.Name -contains 'TraceRoute'){$report+="TraceRoute:$($resultItem.TraceRoute)"+[Environment]::NewLine}$report+=($resultItem.Result|Format-Table -AutoSize|Out-String);$report;if($PSBoundParameters.ContainsKey("OutputAll")){if(-not(Test-Path $OutputAll)){New-Item -Path $OutputAll -ItemType File -Force|Out-Null}$report|Out-File -FilePath $OutputAll -Encoding UTF8 -Append;$resultItem|Export-Csv -Path "${OutputAll}.csv" -Encoding UTF8 -NoTypeInformation -Append;$resultItem|Export-Clixml -Path "${OutputAll}.xml" -Append}if($PSBoundParameters.ContainsKey("OutTxt")){if(-not(Test-Path $OutTxt)){New-Item -Path $OutTxt -ItemType File -Force|Out-Null}$report|Out-File -FilePath $OutTxt -Encoding UTF8 -Append}if($PSBoundParameters.ContainsKey("OutCsv")){if(-not(Test-Path $OutCsv)){New-Item -Path $OutCsv -ItemType File -Force|Out-Null}$resultItem|Export-Csv -Path $OutCsv -Encoding UTF8 -NoTypeInformation -Append}if($PSBoundParameters.ContainsKey("OutXml")){if(-not(Test-Path $OutXml)){New-Item -Path $OutXml -ItemType File -Force|Out-Null}$resultItem|Export-Clixml -Path $OutXml -Append}}"Scanning done: $ipScanned IP addresses scanned.";"$ipdown hosts are down or filtered."+[Environment]::NewLine;$endDate=Get-Date;"End of scanning at $endDate";"Timeout: $Timeout";}}#>


